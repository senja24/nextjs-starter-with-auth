{
  "version": 3,
  "sources": ["../../../contentlayer.config.js"],
  "sourcesContent": ["import { defineDocumentType, makeSource } from \"contentlayer/source-files\"\r\nimport rehypePrettyCode from \"rehype-pretty-code\"\r\nimport rehypeSlug from \"rehype-slug\"\r\n\r\n/** @type {import('contentlayer/source-files').ComputedFields} */\r\nconst computedFields = {\r\n  slug: {\r\n    type: \"string\",\r\n    resolve: (doc) => `/${doc._raw.flattenedPath}`,\r\n  },\r\n  slugAsParams: {\r\n    type: \"string\",\r\n    resolve: (doc) => doc._raw.flattenedPath.split(\"/\").slice(1).join(\"/\"),\r\n  },\r\n  readingTime: {\r\n    type: \"number\",\r\n    resolve: (doc) => {\r\n      // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access\r\n      const content = String(doc.body.raw)\r\n      const wordsPerMinute = 200\r\n      const numberOfWords = content.split(/\\s/g).length\r\n      const minutes = numberOfWords / wordsPerMinute\r\n      return Math.ceil(minutes)\r\n    },\r\n  },\r\n}\r\n\r\nexport const Post = defineDocumentType(() => ({\r\n  name: \"Post\",\r\n  filePathPattern: `blog/**/*.mdx`,\r\n  contentType: \"mdx\",\r\n  fields: {\r\n    title: {\r\n      type: \"string\",\r\n      required: true,\r\n    },\r\n    description: {\r\n      type: \"string\",\r\n    },\r\n    date: {\r\n      type: \"date\",\r\n      required: true,\r\n    },\r\n    published: {\r\n      type: \"boolean\",\r\n      default: true,\r\n    },\r\n    image: {\r\n      type: \"string\",\r\n      required: true,\r\n    },\r\n    authors: {\r\n      type: \"list\",\r\n      of: { type: \"string\" },\r\n      required: true,\r\n    },\r\n  },\r\n  computedFields,\r\n}))\r\n\r\nexport const Author = defineDocumentType(() => ({\r\n  name: \"Author\",\r\n  filePathPattern: `authors/**/*.mdx`,\r\n  contentType: \"mdx\",\r\n  fields: {\r\n    title: {\r\n      type: \"string\",\r\n      required: true,\r\n    },\r\n    description: {\r\n      type: \"string\",\r\n    },\r\n    avatar: {\r\n      type: \"string\",\r\n      required: true,\r\n    },\r\n    twitter: {\r\n      type: \"string\",\r\n      required: true,\r\n    },\r\n  },\r\n  computedFields,\r\n}))\r\n\r\nexport const Page = defineDocumentType(() => ({\r\n  name: \"Page\",\r\n  filePathPattern: `pages/**/*.mdx`,\r\n  contentType: \"mdx\",\r\n  fields: {\r\n    title: {\r\n      type: \"string\",\r\n      required: true,\r\n    },\r\n    description: {\r\n      type: \"string\",\r\n    },\r\n  },\r\n  computedFields,\r\n}))\r\n\r\nexport default makeSource({\r\n  contentDirPath: \"./src/content\",\r\n  documentTypes: [Post, Author, Page],\r\n  mdx: {\r\n    rehypePlugins: [\r\n      rehypeSlug,\r\n      [\r\n        rehypePrettyCode,\r\n        {\r\n          theme: { dark: \"github-dark\", light: \"github-light\" },\r\n\r\n          /**\r\n           * @param {{ children: string | any[]; }} node\r\n           */\r\n          onVisitLine(node) {\r\n            if (node.children.length === 0) {\r\n              node.children = [{ type: \"text\", value: \" \" }]\r\n            }\r\n          },\r\n          /**\r\n           * @param {{ properties: { className: string[]; }; }} node\r\n           */\r\n          onVisitHighlightedLine(node) {\r\n            node.properties.className.push(\"line--highlighted\")\r\n          },\r\n          /**\r\n           * @param {{ properties: { className: string[]; }; }} node\r\n           */\r\n          onVisitHighlightedWord(node) {\r\n            node.properties.className = [\"word--highlighted\"]\r\n          },\r\n        },\r\n      ],\r\n    ],\r\n  },\r\n})\r\n"],
  "mappings": "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",
  "names": []
}
